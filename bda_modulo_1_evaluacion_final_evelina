class OnlineShop: #"class" la hemos utilizado para definir una nueva clase. Una clase es como una plantilla que luego nos servirá para crear objetos. 
   
    def __init__(self):                                       # Hemos iniciado la clase TiendaOnline: el golem ha cobrado vida. 
        
        self.inventory = []                                  #el primer atributo de la clase será una lista vacia de diccionarios. Cada diccionario va a representar un producto. Claves: nombre, precio y cantidad de productos.  
        self.customers = {}                                  #el segundo atributo de nuestra clase será un diccionario vacio. Cada clave de este diccionario será el nombre del cliente, su email e historial de las compras. 
        self.total_sales= 0.0                                #el tercer atributo será un número de tipo float para llevar un registro de las ventas totales de la tienda. Lo he inicializado con valor 0. 
    
    def add_product(self, name, price, quantity):            #con este método vamos a a) agregar un producto al inventario, o b) si el producto ya está, pues actualizar la cantidad. 
        
        new_product = {"name": name, "price": price, "quantity": quantity} # Creamos un diccionario y recibe el nombre, precio y cantidad del producto como parámetros
        
        for product in self.inventory:                      #Itera a través del inventario y compara los nombres de los productos con el nombre proporcionado
          if product["name"] == name:
            product ["quantity"] += quantity                 #Si el producto ya existe, actualiza la cantidad y nos la devuelve para guardarla con "return." Se cierra la funcion. 
            return self.inventory
        self.inventory.append(new_product)                  #Si no existe, el programa sigue iterando, y agrega un nuevo producto al inventario - se utiliza el operador .append 
    
    def see_inventory(self):                                #Muestra el inventario de productos con sus detalles.
        
        for product in self.inventory:                       #Itera a través del inventario utilizando el bucle for 
            print(f"Name: {product['name']}, Price: ${product['price']}, Quantity: {product['quantity']}") #Utilizamos print porque solamente queremos ver esta información en la pantalla. 
    
    def look_for_product (self, name):                       #Busca un producto en el inventario por nombre y muestra sus detalles.
        
        for product in self.inventory:                       #Itera a traves del inventario utilizando el bucle for
          if product["name"] == name:
            print(f"Name: {product ['name']}, Price: ${product['price']}, Quantity: {product['quantity']}")
            return self.inventory                               #Salimos del bucle si encontramos el producto
        print(f"The product {name} can't be found in stock.") #Si no encontramos el producto, imprimimos el mensaje que no se encontró en el inventario. 
    
    def update_stock (self, name, quantity):
        
        for product in self.inventory:                         #Esta línea inicia un bucle for que recorre cada elemento (producto) dentro de la lista self.inventory.
          if product ["name"] == name:                         #Esta condición if verifica si el atributo name (nombre) del producto actual coincide con el name que se pasó a la función
            product ['quantity'] += quantity                   #Si el nombre coincide, entonces actualizamos el atributo quantity (cantidad) del producto encontrado sumándole la quantity especificada.
            return self.inventory
          print(f"The product {name} can't be found in stock.")
    
    def remove_product (self, name):
        
        for product in self.inventory:                       #Esta linea inicia un bucle for que recorre cada elemento (producto) dentro de la lista self.inventory.
          if product ["name"] == name:                       #Esta condición if verifica si el atributo name (nombre) del producto actual coincide con el name que se pasó a la función
            self.inventory.remove (product)                  #Si el nombre coincide, entonces borramos el producto del inventario utilizando el operador remove. 
            print (f"The product {name} has been removed from stock.") 
            return
        print(f"The product {name} can't be found in stock.")
    
    def calculate_inventory_value (self):
        
        total_value = 0                                     #Definimos el variable valor total, que empieza como un int = 0
        for product in self.inventory:
          product_value = product ['price'] * product ['quantity'] #Esta línea calcula el valor total de un producto multiplicando su precio por su cantidad. El resultado se almacena en la variable product_value
          total_value += product_value                             #Esta línea suma el product_value calculado en el paso anterior al total_value. Esto se hace para acumular el valor total de todos los productos en el inventario.
        print (f"Total inventory value is: $ {total_value}")
        return total_value
    
    def buy_product (self):
      
        shopping_cart = {} # Carrito de compra es una lista de diccionarios
        total_price = 0
        
        while True:
          self.see_inventory ()
          buy_product = input ("Insert product name:")
          if buy_product == "leave":
            break 
          else:
              buy_quantity = int (input("Insert product quantity"))
              for product in self.inventory:
                if buy_product == product ["name"]:
                   product["quantity"] += buy_quantity
              for product in self. inventory:
                  if buy_product == product[ "name"]:
                     if product[ "quantity"] >= buy_quantity: # para comprobar si hay suficiente cantidad
                        shopping_cart.append ("name": buy_product, "quantity" :buy_quantity, "price": product ["price"])
                        total_price += buy_product ["price"] * buy_quantity
                        print (f"This is the content of your shopping cart {shopping_cart}, and this is the total price {total_price}")
                  else:
                    print ("There isn't enough quantity to add to the shopping cart.")
        return shopping_cart
                    
    def process_payment(self):                              #procesa el pago de una compra
        
        try:                                                #el bloque try...except para manejar excepciones
          
         total_purchase = float(input("Insert total purchase: $")) #Solicita al cliente con un input el total que tiene que pagar
         paid_quantity= float(input("Insert paid quantity: $"))    #Solicita al cliente un input de la cantidad que va a pagar
         
         if paid_quantity < total_purchase:
            print("The quantity of money you provided is not enough to cover the total cost of the purchase.")
         else:
            change = paid_quantity - total_purchase             #Calcula el cambio y muestra el pago exitoso
            print(f"Your payment has been processed: ${change}")
            print("Thank you for your purchase!")
            
        except:
         print("There has been an unexpected error.")
        
   

    def add_customer(self, name, email):
       
       if name in self.customers:
        print(f"The customer {name} already exists.")
        new_customer = {'email': email, 'purchases': []}
        self.customers[name] = new_customer
       print(f"The customer {name} has been added successfully.")
       
    def see_customers(self):                                  #Muestra la lista de clientes registrados con sus nombres y correos electrónicos.

        for name, customer in self.customers.items ():
          print (f"Name: {name}, Email: {customer['email']}")
    
    def register_purchase(self, customer_name):
      
     if customer_name not in self.customers:
         print(f"The purchase cannot be performed. The customer {customer_name} is not registered.")
     total_purchase = 0
     shopping_cart = self.buy_product()
     for product_info in shopping_cart: #Dentro de registrar compra - escribir una variable "carrito" y la igualo a self.comprar producto; esa variable carrito 
        product_name = product_info["name"]
        price = product_info["price"]
        quantity = product_info["quantity"]
        product_in_stock = False
        for inventory_item in self.inventory:
            if inventory_item["name"] == product_name:
                product_in_stock = True
                if inventory_item["quantity"] < quantity:
                    print(f"Insufficient stock for {product_name}.")
                    return
                inventory_item["quantity"] -= quantity
                break
            if product_in_stock:
              total_product = price * quantity
              total_purchase += total_product
              self.customers[customer_name]["purchases"].append({
                "product": product_name,
                "quantity": quantity,
                "price": price,
                "total": total_product
            })
        self.total_sales += total_purchase
    print(f"The purchase has been registered. Total: ${total_purchase}")

       
    def see_customer_purchase (self, customer_name): #Muestra las compras realizadas por el cliente, incluyendo detalles de productos y totales.
        
        if customer_name not in self.customers:
         print (f"The action cannot be performed. The customer {customer_name} is not registered.")
         

        purchase_history = self.customers[customer_name]["purchases"]
        if not purchase_history:
            print(f"{customer_name} has no registered purchases.")
        
        for purchase in purchase_history:
          for product, details in purchase ['products'].items():
           print(f"Product: {product} - Price: ${details['price']} - Quantity: {details['quantity']} - Total: ${details['total']}")
           
    def calculate_total_sales(self):
     
     for customer in self.customers.values()():
        for purchase in customer ['purchases']:  # Iterate over the 'purchases' list
            self.total_sales += purchase['total']
     print(f"Total shop sales: ${self.total_sales}")
          
        

  
   

